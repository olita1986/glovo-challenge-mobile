//
//  MapViewController.swift
//  FindACity
//
//  Created by Nisum on 7/8/18.
//  Copyright (c) 2018 Orlando Arzola. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MapKit

protocol MapDisplayLogic: class {
    func displayLoading()
    func dismissLoading()
    func displayView()
    func displayError(viewModel: Map.AlertView.ViewModel)
    func displayCityInfo(viewmodel: Map.CurrentCity.ViewModel)
    func displayUpdateLocation(viewModel: Map.Location.ViewModel)
    func displayWorkingArea(viewModel: Map.Location.ViewModel)
}

class MapViewController: UIViewController, MapDisplayLogic {
    var interactor: MapBusinessLogic?
    var router: (NSObjectProtocol & MapRoutingLogic & MapDataPassing)?
        
    var loadingView: UIView?

    @IBOutlet weak var currencyLabel: UILabel!
    @IBOutlet weak var languageLabel: UILabel!
    @IBOutlet weak var cityNameLabel: UILabel!
    
    var mapContainerViewController: MapContainerViewController?
    
    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = MapInteractor()
        let presenter = MapPresenter()
        let router = MapRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        interactor?.getCountriesAndCities()
    }
    
    func displayView() {
        mapContainerViewController = MapContainerViewController()
        mapContainerViewController?.delegate = self
        addChildViewController(mapContainerViewController!)
        view.addSubview((mapContainerViewController?.view)!)
        mapContainerViewController?.view.translatesAutoresizingMaskIntoConstraints = false
        mapContainerViewController?.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        mapContainerViewController?.view.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
        mapContainerViewController?.view.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        mapContainerViewController?.view.heightAnchor.constraint(equalToConstant: view.bounds.height / 2).isActive = true
        mapContainerViewController?.didMove(toParentViewController: self)
    }
    
    func displayLoading() {
        let activityIndicator = UIActivityIndicatorView(activityIndicatorStyle: .whiteLarge)
        activityIndicator.translatesAutoresizingMaskIntoConstraints = false
        loadingView = UIView()
        loadingView?.backgroundColor = UIColor(red: 0, green: 0, blue: 0, alpha: 0.4)
        loadingView?.addSubview(activityIndicator)
        view.addSubview(loadingView!)
        activityIndicator.startAnimating()
        activityIndicator.centerXAnchor.constraint(equalTo: (loadingView?.centerXAnchor)!).isActive = true
        activityIndicator.centerYAnchor.constraint(equalTo: (loadingView?.centerYAnchor)!).isActive = true
        
        loadingView?.translatesAutoresizingMaskIntoConstraints = false
        loadingView?.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        loadingView?.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        loadingView?.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        loadingView?.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
    }
    
    func dismissLoading() {
        UIView.animate(withDuration: 0.5, animations: {[weak self] in
            self?.loadingView?.alpha = 0
        }) { [weak self](success) in
            guard success else { return }
            self?.loadingView?.removeFromSuperview()
            self?.loadingView = nil
        }
    }
    
    func displayError(viewModel: Map.AlertView.ViewModel) {
        let alert = UIAlertController(title: viewModel.title, message: viewModel.message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: viewModel.actionTitle, style: .default, handler: nil))
        present(alert, animated: true, completion: nil)
    }
    
    func displayCityInfo(viewmodel: Map.CurrentCity.ViewModel) {
        cityNameLabel.text = viewmodel.cityName
        currencyLabel.text = viewmodel.currency
        languageLabel.text = viewmodel.language
    }
    
 
    @IBAction func findAPlace(_ sender: Any) {
        router?.routeToLocationList()
    }
    
    func displayUpdateLocation(viewModel: Map.Location.ViewModel) {
        mapContainerViewController?.setMapLocation(lat: viewModel.lat, lon: viewModel.lon)
        mapContainerViewController?.setMapWorkingArea(workingArea: viewModel.workingArea)
    }
    
    func displayWorkingArea(viewModel: Map.Location.ViewModel) {
        mapContainerViewController?.setMapWorkingArea(workingArea: viewModel.workingArea)
    }
}

extension MapViewController: MapContainerViewControllerDelegate {
    func receivedPlaceMark(placeMark: CLPlacemark) {
        let request = Map.PlaceMark.Request(countryCode: placeMark.isoCountryCode!, cityCode: placeMark.administrativeArea!)
        interactor?.userIsInValidCountryAndCity(request: request)
    }
}

extension MapViewController: LocationListViewControllerDelegate {
    func selectedLocation(countryName: String, cityName: City) {
        let request = Map.CurrentCity.Request(city: cityName, country: countryName)
        interactor?.updateMap(request: request)
    }
}
