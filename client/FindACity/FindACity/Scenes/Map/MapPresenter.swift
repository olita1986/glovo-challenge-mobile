//
//  MapPresenter.swift
//  FindACity
//
//  Created by Nisum on 7/8/18.
//  Copyright (c) 2018 Orlando Arzola. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MapPresentationLogic {
    func presentLoading()
    func hideLoading()
    func presentView()
    func presentError(response: Map.Error.Response)
    func presentCityInfo(response: Map.CurrentCity.Response)
    func presentUpdateLocation(response: Map.Location.Response)
    func presentWorkingArea(response: Map.Location.Response)
}

class MapPresenter: MapPresentationLogic {
    weak var viewController: MapDisplayLogic?
    
    func presentView() {
        viewController?.displayView()
    }
    
    func presentLoading() {
        viewController?.displayLoading()
    }
    
    func hideLoading() {
        viewController?.dismissLoading()
    }
    
    func presentError(response: Map.Error.Response) {
        var viewModel: Map.AlertView.ViewModel!
        switch response.error {
        case .notValidCity:
            viewModel = Map.AlertView.ViewModel(title: "Not Valid City", message: "Please search from the upper button", actionTitle: "Ok")
        case .notValidCountry:
            viewModel = Map.AlertView.ViewModel(title: "Not Valid Country", message: "Please search from the upper button", actionTitle: "Ok")
        case .genericError:
            viewModel = Map.AlertView.ViewModel(title: "An Error Occured", message: "Please try again later", actionTitle: "Ok")
        }
        viewController?.displayError(viewModel: viewModel)
    }
    
    func presentCityInfo(response: Map.CurrentCity.Response) {
        var viewModel: Map.CurrentCity.ViewModel!
        if let city = response.city {
            viewModel = Map.CurrentCity.ViewModel(cityName: city.name, currency: city.currency, language: city.languageCode)
        } else {
            viewModel = Map.CurrentCity.ViewModel(cityName: "NA", currency: "NA", language: "NA")
        }
        viewController?.displayCityInfo(viewmodel: viewModel)
    }
    
    func presentUpdateLocation(response: Map.Location.Response) {
        let viewModel = Map.Location.ViewModel(lat: response.location.coordinate.latitude, lon: response.location.coordinate.longitude, workingArea: response.workingArea)
        viewController?.displayUpdateLocation(viewModel: viewModel)
    }
    
    func presentWorkingArea(response: Map.Location.Response) {
        let viewModel = Map.Location.ViewModel(lat: response.location.coordinate.latitude, lon: response.location.coordinate.longitude, workingArea: response.workingArea)
        viewController?.displayWorkingArea(viewModel: viewModel)
    }
}
