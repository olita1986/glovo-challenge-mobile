//
//  LocationListViewController.swift
//  FindACity
//
//  Created by Nisum on 7/10/18.
//  Copyright (c) 2018 Orlando Arzola. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LocationListDisplayLogic: class {
    func displayLocationList(viewModel: LocationList.Location.ViewModel)
}

protocol LocationListViewControllerDelegate: class {
    func selectedLocation(countryName: String, cityName: City)
}

class LocationListViewController: UIViewController, LocationListDisplayLogic {
    var interactor: LocationListBusinessLogic?
    var router: (NSObjectProtocol & LocationListRoutingLogic & LocationListDataPassing)?

    let tableView = UITableView()
    var locations: [(String, [City])] = []
    
    weak var delegate: LocationListViewControllerDelegate?

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = LocationListInteractor()
        let presenter = LocationListPresenter()
        let router = LocationListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }


    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setupTableView()
        interactor?.getLocations()
    }
    
    private func setupTableView() {
        tableView.delegate = self
        tableView.dataSource = self
        tableView.register(UITableViewCell.self, forCellReuseIdentifier: "locationCell")
        view.addSubview(tableView)
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true
        tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true
    }
    
    func displayLocationList(viewModel: LocationList.Location.ViewModel) {
        locations = viewModel.locations
        tableView.reloadData()
    }
}

extension LocationListViewController: UITableViewDelegate, UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return locations.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return locations[section].1.count
    }
    
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return locations[section].0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "locationCell", for: indexPath)
        cell.textLabel?.text = locations[indexPath.section].1[indexPath.row].name
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let countryName  = locations[indexPath.section].0
        let city = locations[indexPath.section].1[indexPath.row]
        delegate?.selectedLocation(countryName: countryName, cityName: city)
        navigationController?.popViewController(animated: true)
    }
}
